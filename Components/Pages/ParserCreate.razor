@page "/parser/create"
@using System.Text.Json
@using cardscore_api.Services
@using cardscore_api.Models

@rendermode InteractiveServer

@inject LeagueParseListService ParserSrv
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@using cardscore_api.Components.Layout
<CheckAuth />

<PageTitle>Новая лига для парсера</PageTitle>

<div class="main-header">
    <h2>
        Новая лига для парсера
    </h2>
    <button class="button" @onclick="Save">
        Сохранить
    </button>
</div>
<form action="#" class="main-edit">
    <label for="">
        Имя:
        <div class="input"><input type="text" @bind-value="parser.Name"></div>
    </label>
    <label for="">
        Url:
        <div class="input"><input type="text" @bind-value="parser.Url"></div>
    </label>
     <label for="">
        Тип подписки:
        <select class="select">
            @foreach (var parserType in Enum.GetValues(typeof(ParserType)).Cast<ParserType>())
            {
                <option @onclick="() => ChangeParserType(parserType)" selected="@(parserType == parser.ParserType)">@parserType</option>
            }
        </select>
    </label>

</form>
@code
{
    [Parameter]
    public int id { get; set; }

    public LeagueParseData parser = new();

    protected override async Task OnInitializedAsync()
    {
        
    }

    void ChangeParserType(ParserType parserType)
    {
        parser.ParserType = parserType;
    }

    async void Save()
    {
        await JsRuntime.InvokeVoidAsync("alert", "Загрузка...");
        await ParserSrv.Create(parser);
        await JsRuntime.InvokeVoidAsync("alert", "Сохранено");
        NavigationManager.NavigateTo("/parser");
        
    }

}
@page "/users"

@using cardscore_api.Services
@using cardscore_api.Models

@rendermode InteractiveServer
@inject UserService UsersSrv

<PageTitle>Пользователи</PageTitle>

@using cardscore_api.Components.Layout
<CheckAuth />

<div class="main-header">
    <h2>
        Пользователи
    </h2>
    <div class="input">
        <img src="/img/search.svg">
        <input type="text" placeholder="Поиск" @bind-value="search" @oninput="OnSearchTextChanged" />
    </div>
    <a href="/users/create" class="button">
        Добавить новый
    </a>
</div>
<div class="main-table">
    <table>
        <tr>
            <th>
                ID
            </th>
            <th>
                Имя
            </th>
            <th>
                Роль
            </th>
            <th>
                Подписка до
            </th>
            <th>

            </th>
            <th>

            </th>
        </tr>

        @if (usersList != null)
        {
            @foreach (var user in filterFunc != null ? usersList.Where(filterFunc) : usersList)
            {
                <tr>
                    <td>
                        @user.Id
                    </td>
                    <td>
                        @user.Name
                    </td>
                    <td>
                        @(user.RoleId == 2 ? "Пользователь" : "Администратор")
                    </td>
                    <td>
                        @user.SubData
                    </td>
                    <td>
                        <a href="/users/@user.Id">
                            Редактировать
                        </a>
                    </td>
                    <td>
                        <button @onclick="()=>DeleteUser(user.Id)">
                            Удалить
                        </button>
                    </td>
                </tr>
            }
        }
    </table>
</div>

@code
{
    List<User> usersList;

    string search = "";

    Func<User, bool> filterFunc;


    protected override async Task OnInitializedAsync()
    {
        usersList = await UsersSrv.GetAll();
        UpdateFilter();
    }

    void OnSearchTextChanged() 
    {
        UpdateFilter(); 
    }

    void UpdateFilter()
    {
        filterFunc = (u) => u.Name.Contains(search) || u.Email.Contains(search) || u.Phone.Contains(search);
    }

    async void DeleteUser(int userId)
    {
        await UsersSrv.Remove(userId);
        usersList = await UsersSrv.GetAll();
    }

}